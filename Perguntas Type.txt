3.4 Perguntas para Reflexão

O que são parâmetros opcionais em funções?
R:  são valores que podem ou não ser passados para uma função, tendo um valor padrão predefinido
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Qual é a principal diferença entre uma função anônima e uma arrow function?
R: As funções anônimas basicamente são as funções de expressão, a diferença é que ao invés de atribuí-la à uma variável, você atribuí ela para um parâmetro.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Como você define uma classe em TypeScript?
R:  palavra-chave para declarar uma classe é class
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

O que é uma interface e como ela é usada em TypeScript?
R: é uma sintaxe que define a estrutura de um objeto, classe ou função, garantindo que tenham as propriedades e tipos específicos. 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

O que é herança e como ela funciona em TypeScript?
R: ela permite que uma classe (chamada de classe derivada ou subclasse) herde propriedades e métodos de outra classe
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Explique o conceito de polimorfismo com um exemplo.
R: O polimorfismo permite que você trate diferentes tipos de objetos de forma uniforme, simplificando o código e promovendo flexibilidade e extensibilidade
EX: class Animal {
    nome: string;

    constructor(nome: string) {
        this.nome = nome;
    }

    fazerSom() {
        console.log("O animal está fazendo um som.");
    }
}

class Cachorro extends Animal {
    fazerSom() {
        console.log("O cachorro está latindo: Au au!");
    }
}

class Gato extends Animal {
    fazerSom() {
        console.log("O gato está miando: Miau!");
    }
}

// Exemplo de polimorfismo
function fazerBarulho(animal: Animal) {
    animal.fazerSom(); // O comportamento exato será decidido pela classe concreta
}

const rex = new Cachorro("Rex");
const felix = new Gato("Felix");

fazerBarulho(rex);  // Saída: O cachorro está latindo: Au au!
fazerBarulho(felix); // Saída: O gato está miando: Miau!
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Qual é a função do encapsulamento em classes?
R: restringir o acesso aos seus atributos, normalmente usando private ou protected como modificador de acesso, além de permitir este acesso somente via métodos da própria classe.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Como você cria uma função com um valor padrão para um parâmetro?
R: você define o valor padrão diretamente na declaração do parâmetro, utilizando o operador de atribuição =
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
O que acontece se você não passar um parâmetro opcional em uma função?
R: Se o parâmetro opcional não tiver um valor padrão, ele será tratado como undefined
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Quais são os benefícios de utilizar interfaces ao invés de classes?
R: Foco na Estrutura e Contratos, Não na Implementação, Maior Flexibilidade, Facilita o Uso de Tipagem com Objetos e Funções, Compatibilidade e Uso em Tipagem Estrutural, Suporte a Tipos Dinâmicos e Genéricos, Interfaces Não Geram Código na Compilação, Múltiplas Implementações por Classes Diferentes, Uso com Mixins e Decoração

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4.6 Perguntas para Reflexão
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
O que é um módulo em TypeScript e como ele é utilizado?
R: Módulos são uma maneira de organizar e reutilizar código em TypeScript, facilitando a manutenção e a escalabilidade dos projetos. Eles permitem que você separe seu código em diferentes arquivos e componentes, tornando-o mais modular.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Qual a diferença entre export e export default?
R: Para compartilhar código entre diferentes arquivos, você pode usar a palavra-chave export para tornar funções, classes, interfaces ou variáveis disponíveis em outros módulos.
 export default para exportar um único valor ou objeto de um módulo.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Como namespaces ajudam a organizar o código?
R: agrupando código relacionado e evitando conflitos de nome
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Como você pode evitar conflitos de nome em um projeto grande?
R: Componentes dentro de um namespace só podem ser acessados pelo nome do namespace.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
O que é o Webpack e como ele auxilia no desenvolvimento?
R: Webpack é uma ferramenta que empacota vários arquivos JavaScript e suas dependências em um único arquivo. Ele também pode processar arquivos TypeScript.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Qual o propósito do Babel em projetos TypeScript?
R: Babel é um compilador que permite escrever código JavaScript moderno, que pode ser convertido para versões mais antigas da linguagem para maior compatibilidade.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Como você manipula o DOM com TypeScript?
R: Manipular o DOM e lidar com eventos são tarefas essenciais no desenvolvimento web. Em TypeScript, você pode fazer isso de forma semelhante ao JavaScript, mas com o suporte de tipagem
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Como eventos são tratados em TypeScript?
R: Além de manipular o DOM, você pode lidar com eventos, como cliques ou digitação de texto, de maneira segura com TypeScript.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
O que são type assertions e por que são importantes na manipulação de DOM?
R: Type assertions são importantes na manipulação de DOM porque ajudam o desenvolvedor a informar ao TypeScript qual é o tipo exato do elemento selecionado, permitindo acessar suas propriedades e métodos específicos. Elas tornam o código mais robusto e fácil de manter, garantindo que o compilador possa entender melhor as intenções do desenvolvedor, especialmente ao lidar com tipos complexos ou incertos, como na seleção de elementos DOM.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Quais são os benefícios de usar ferramentas de build como Webpack e Babel em projetos TypeScript?
R: O uso de ferramentas de build como Webpack e Babel em projetos TypeScript oferece uma série de vantagens, desde a compatibilidade com diferentes navegadores até a otimização de performance
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Perguntas para Reflexão
Compreensão do Fluxo do Jogo:
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Como o fluxo do jogo se desenrola desde que o jogador faz uma escolha até que o resultado é exibido?
R:O jogador clica em um botão (por exemplo, "pedra").
A função playGame() é chamada com o argumento correspondente à escolha do jogador.
Dentro de playGame(), a escolha do computador é gerada aleatoriamente.
A função determineWinner() é chamada para determinar o vencedor com base nas escolhas do jogador e do computador.
O resultado (se foi um empate, vitória ou derrota) é exibido na página, alterando o conteúdo do elemento resultDisplay.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
O que acontece quando o jogador clica em um dos botões?
R: A escolha do jogador é passada para a função playGame().
Uma escolha aleatória do computador é gerada.
O resultado do jogo é exibido, indicando as escolhas e o vencedor.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lógica de Determinação do Vencedor:

Como a função determineWinner decide se o jogador ganhou, perdeu ou empatou?
R:A função determineWinner() decide o resultado comparando a escolha do jogador com a do computador. A lógica é:
Empate: se as escolhas forem iguais.
Vitória do Jogador: se a escolha do jogador vence a do computador conforme as regras clássicas (ex: pedra ganha de tesoura).
Derrota do Jogador: em todos os outros casos.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Que condições precisam ser atendidas para que cada resultado ocorra?
R: Empate ocorre se as escolhas forem idênticas.
Vitória ocorre se a escolha do jogador for mais forte (ex.: pedra > tesoura).
Derrota ocorre se a escolha do computador for mais forte.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Uso de Funções:

Como as funções estão organizadas no código? Elas estão desempenhando suas responsabilidades de forma clara?
O que você poderia fazer para melhorar a clareza ou a eficiência do código?
R: Quebrar playGame() em subfunções para separar melhor as responsabilidades.
Mover a lógica da escolha aleatória do computador para uma função separada.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Manipulação do DOM:

Como o código utiliza a manipulação do DOM para atualizar o conteúdo da página?
R: Selecionar os botões com getElementById() e associar eventos de clique.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Que métodos foram utilizados para selecionar elementos e alterar seu conteúdo?
R: Atualizar o conteúdo do elemento resultDisplay com a escolha do jogador, do computador e o resultado.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Eventos de Clique:

Como os eventos de clique são configurados para os botões? O que acontece quando um botão é clicado?
R: Eventos de clique são configurados com addEventListener() nos botões, chamando a função playGame() quando clicados.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
O que você poderia adicionar para melhorar a interatividade do jogo?
R: Adicionar animações.
Mostrar um histórico das partidas.
Exibir um feedback visual enquanto o resultado é calculado.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Aleatoriedade:

Como a escolha da máquina é feita de forma aleatória? Você entende a lógica por trás de Math.random() e Math.floor()?
R: const computerChoice = choices[Math.floor(Math.random() * choices.length)];
Isso usa Math.random() para gerar um número entre 0 e 1, multiplicado pelo comprimento da lista de escolhas, e arredonda para baixo com Math.floor().
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Que outras maneiras você poderia implementar para gerar uma escolha aleatória?
R: Outra forma de gerar escolhas aleatórias poderia ser usando uma função que simule a seleção baseada em uma lista de probabilidades.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Reflexão Pessoal:

O que você aprendeu ao criar este projeto?
Como você se sente em relação ao uso de HTML, CSS e TypeScript juntos? Existe alguma parte do processo que você achou desafiadora?
R: o código inteiro foi desafiador para min, é basicamente a primeira vez que estou fazendo um código em Typescript então para min está tudo sendo bem confuso.

